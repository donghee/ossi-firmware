{"name":"Ossi-firmware","body":"OSSIREADME \r\n\r\nOSSI-1 인공위성 사용방법\r\n\r\n## BEACON 사용법 ##\r\n1. BEACON은 144.25MHZ 에서 12wpm 으로 CW를 신호를 내보낸다. CW는 모스코드로 인코딩 되어 있다\r\nCW 신호의 내용은 'OSSI/1' 와 인공위성 기본정보를 보낸다.\r\n\r\n\t첫번째(6개 바이트) 인공위성 이름\r\n\t\r\n\t    OSSI/1 \r\n\t\r\n\t두번째(5개 바이트) 형식: 1 space errorflag space powerOn\r\n\t\r\n\t\t1 0b10100 0b11111 (비트순서:EPS(BATTERY), OBC, BEACON, COMMS, Payload)\r\n\t\r\n\t세번째(5개 바이트) 형식: 2 space solarvoltage space batteryvoltage\r\n\t\r\n\t\t2 0b11111111 0b11111111\r\n\t\r\n\t각 문장은 Space Space Space 로 구분한다.\r\n\r\n2. 신호읽기\r\nOSSI 사이트를 보고 인공위성이 자신의 상공을 지나갈때 무전기를 꺼내어 144.25MHZ를 맞추어 귀로 들으면 된다.\r\n\r\n3. 인공위성 찾기\r\n144.25MHZ에서 CW신호에서 나오는 OSSI/1을 찾아 듣는다. \r\n\r\n\r\n## COMMS의 동작 ##\r\n지상에서 435.75MHZ로 2FSK로 다음 패킷을 보낸다.\r\n\r\n\tfrom ossi import Uplink, Downlink, Request\r\n\t\r\n\tu = Uplink(435.75, '2FSK', 1200)\r\n \td = Downlink(435.75, '2FSK', 9600)\r\n\trequest = Request(u, d)\r\n\r\n\t# EPS\r\n\t## 온도 \r\n\ttemp = request.getBatteryTemperature()\r\n\ttemp = request.getPannelTemperature()\r\n\tx1_temp = request.getSolarPannelTemperature(X,1)\r\n\tz1_temp = request.getSolarPannelTemperature(Z,1)\r\n\ty1_temp = request.getSolarPannelTemperature(Y,1)\r\n\r\n\t## volatge\r\n\tv = request.getBatteryVoltage()\r\n\tv = request.getSolarPannelVoltage()\r\n\r\n\t## solar sensor\r\n\ts = request.getSolarSensor()\r\n\r\n\t## 충전 정보\r\n\tcheck = request.checkBatteryCharge()\r\n\t\r\n\r\n\t## 솔라, 배터리, SC 켜져 있는가?\r\n\tcheck = request.checkSolarOn()\r\n\tcheck = request.checkBatteryOn()\r\n\tcheck = request.checkSuperCapOn()\r\n\r\n\t## 수퍼캡 \r\n\tstatus = request.doSuperCapOn()\r\n\tcheck = request.checkSuperCapCharge()\r\n\r\n\t## EPS reset!\r\n\trequest.resetEPS()\r\n\r\n\t# OBC\r\n\t## OBC reset!\r\n\trequest.resetOBC()\r\n\t\r\n\t## 자이로\r\n\tl = request.getGyro()\r\n\r\n\t## RTC 시간 가져오기 \r\n\ttime = request.getRtcTime()\r\n\tstatus = request.setRtcTime(datetime.datetime.now())\r\n\r\n\t## Payload LED\r\n\treserveStatus = request.reserveMessage(\"OSSI 1\", datetime.datetime(2012, 12, 12, 12, 12))\r\n\treserveList = request.getReserveList()\r\n\r\n\trequest.ledOn()\r\n\trequest.ledOFF()\r\n\t\r\n\t## 안테나 펴졌는지?\r\n\tcheck = request.checkAntDeploy()\r\n\t## 안테나 펴기\r\n\trequest.antDeploy()\r\n\r\n\trequest.resetPayload()\r\n\r\n\t# COMMS\r\n\trequest.resetCOMMS()\r\n\r\n\t# BEACON\r\n\trequest.resetBEACON()\r\n\r\n\t# STORAGE(EEPROM, FRAM)\r\n\tstatus = request.setByteEEPROM(1, 'x')\r\n\t\r\nhttp://swisscube-live.ch/Publish/S3-D-ICD-1-0a-Housekeeping_ICD.pdf\r\n\r\n\r\n\r\n### 패킷 포멧 ###\r\n\r\n예제 TX 패킷\r\n\r\nOxAA, 0xAA, 0xAA, 0xAA, 0xD3, 0x91, 0xAA, 0xAA, 0xAA, '1', '2', '3', '4', '5', '6', 0xAA, 0xAA, 0XAA\r\n\r\np1, p2, p3, p4, s1, s2, len, command1, c2, c3, d1~dn, crc\r\n\r\n#### ax.25 ####\r\nhttp://swisscube-live.ch/Publish/S3-BC-SE-1-1b-AX.25%20Transfer%20Frames%20Format.pdf\r\n\r\n![](http://i.imgur.com/MygEt.png)\r\n\r\n- 01111110 # flag\r\n- callsign 48bits # destination\r\n- ssid 8bit 011ssid0\r\n- callsign 48bits # source\r\n- ssid 8bit 011ssid0\r\n- control bits 00000011\r\n- protocal identifier 0xF0\r\n- Information field(32-2048)\r\n- Frame-Check Sequence\r\n- 01111110 # flag\r\n\r\n**Information field**\r\n\r\n![](http://i.imgur.com/Xdnas.png)\r\n\r\n- version number: 00\r\n- virtual channel Id: 000\r\n- spare: 000\r\n- master frame count 0x00\r\n- virtual channel frame count 0x00\r\n- first header pointer 0x00\r\n- data \r\n- time flag 0b000\r\n- spare 00\r\n- tc count 00\r\n- time \r\n\r\n## UART로 통신하기 ##\r\nOBC에 있는 인터페이스를 통해서 다른 모듈을 제어 할 수 있다. \r\n\r\n인터페이스는 동일 \r\n\r\n\tfrom ossi import Serial Request\r\n\t\r\n \ts = Serial('Com3', 9600)\r\n\trequest = Request(s)\r\n\r\n\r\n\r\n## 인공위성 dashboard ##\r\n\r\n![](http://www.devco.net/images/gdash-small.png)\r\n\r\nhttps://github.com/ripienaar/graphite-graph-dsl/wiki\r\n","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}